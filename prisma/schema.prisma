generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Art {
  id             String           @id @default(cuid()) // use eTag from bucket, fallback to cuid
  title          String           @default("untitled")
  publicUrl      String?
  views          Int              @default(0)
  oinks          Int              @default(0)
  publishDate    DateTime         @default(now())
  updateDate     DateTime?        @default(now())
  visibility     String           @default("visible")
  description    String?          @default("")
  ArtTagsOnArt   ArtTagsOnArt[]
  ArtSeriesOnArt ArtSeriesOnArt[]
}

model ArtSeries {
  id             String           @id @default(cuid())
  seriesTitle    String           @unique
  thumbnail      String?
  publishDate    DateTime         @default(now())
  updateDate     DateTime?        @default(now())
  ArtSeriesOnArt ArtSeriesOnArt[]
}

model ArtSeriesOnArt {
  artId       String
  artSeriesId String
  Art         Art       @relation(fields: [artId], references: [id])
  ArtSeries   ArtSeries @relation(fields: [artSeriesId], references: [id])

  @@id([artSeriesId, artId])
}

model ArtTag {
  id           String         @id
  artTagName   String
  ArtTagsOnArt ArtTagsOnArt[]
}

model ArtTagsOnArt {
  artId      String
  artTagId   String
  assignedAt DateTime @default(now())
  Art        Art      @relation(fields: [artId], references: [id])
  ArtTag     ArtTag   @relation(fields: [artTagId], references: [id])

  @@id([artTagId, artId])
}

model Author {
  id                   String                 @id @default(cuid())
  name                 String                 @unique()
  role                 String?
  pigThoughts          String?
  internalLink         String
  email                String?                @unique
  quote                String?
  joinDate             DateTime               @default(now())
  isVisible            Boolean                @default(true)
  AuthorsOnAuthorLinks AuthorsOnAuthorLinks[]
  AuthorsOnPosts       AuthorsOnPosts[]
  AuthorsOnTags        AuthorsOnTags[]
}

model AuthorLink {
  id                   String                 @id
  url                  String
  AuthorsOnAuthorLinks AuthorsOnAuthorLinks[]
}

model AuthorsOnAuthorLinks {
  authorId     String
  authorLinkId String
  assignedAt   DateTime   @default(now())
  Author       Author     @relation(fields: [authorId], references: [id])
  AuthorLink   AuthorLink @relation(fields: [authorLinkId], references: [id])

  @@id([authorId, authorLinkId])
}

model AuthorsOnPosts {
  authorId   String
  postId     String
  assignedAt DateTime @default(now())
  Author     Author   @relation(fields: [authorId], references: [id])
  Post       Post     @relation(fields: [postId], references: [id])

  @@id([authorId, postId])
}

model AuthorsOnTags {
  authorId   String
  tagId      String
  assignedAt DateTime @default(now())
  Author     Author   @relation(fields: [authorId], references: [id], onDelete: Cascade, map: "AuthorsOnTags_authorId_fkey")
  Tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade, map: "AuthorsOnTags_tagId_fkey")

  @@id([tagId, authorId], map: "AuthorsOnTags_pkey")
}

model Post {
  id              String           @id @default(cuid())
  title           String           @unique
  slug            String?          @unique
  section         String
  thumbnail       String?
  caption         String?
  readingTime     String?
  views           Int              @default(0)
  oinks           Int              @default(0)
  isSharable      Boolean?         @default(true)
  showViews       Boolean?         @default(true)
  hasScrollspy    Boolean?         @default(true)
  showHeaderImage Boolean?         @default(true)
  publishDate     DateTime         @default(now())
  updateDate      DateTime?        @default(now())
  visibility      String           @default("hidden")
  AuthorsOnPosts  AuthorsOnPosts[]
  PostsOnTags     PostsOnTags[]
}

model PostsOnTags {
  postId     String
  tagId      String
  assignedAt DateTime @default(now())
  Post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade, map: "PostsOnTags_postId_fkey")
  Tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade, map: "PostsOnTags_tagId_fkey")

  @@id([tagId, postId], map: "PostsOnTags_pkey")
}

model Tag {
  id            String          @id @default(cuid())
  tagName       String          @unique()
  AuthorsOnTags AuthorsOnTags[]
  PostsOnTags   PostsOnTags[]
}
