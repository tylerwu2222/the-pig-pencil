generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Art {
  id           String         @id @default(cuid())
  title        String
  description  String?        @default("it's art")
  series       String?
  slug         String?
  thumbnail    String?
  publishDate  DateTime       @default(now())
  updateDate   DateTime?      @default(now())
  visibility   String         @default("hidden")
  ArtTagsOnArt ArtTagsOnArt[]
}

model ArtTag {
  id           String         @id
  artTagName   String
  ArtTagsOnArt ArtTagsOnArt[]
}

model ArtTagsOnArt {
  artId      String
  artTagId   String
  assignedAt DateTime @default(now())
  Art        Art      @relation(fields: [artId], references: [id])
  ArtTag     ArtTag   @relation(fields: [artTagId], references: [id])

  @@id([artTagId, artId])
}

model Author {
  id                   String                 @id @default(cuid())
  name                 String
  role                 String?
  pigThoughts          String?
  internalLink         String
  email                String?                @unique
  quote                String?
  joinDate             DateTime               @default(now())
  isVisible            Boolean                @default(true)
  AuthorsOnAuthorLinks AuthorsOnAuthorLinks[]
  AuthorsOnPosts       AuthorsOnPosts[]
  AuthorsOnTags        AuthorsOnTags[]
}

model AuthorLink {
  id                   String                 @id
  url                  String
  AuthorsOnAuthorLinks AuthorsOnAuthorLinks[]
}

model AuthorsOnAuthorLinks {
  authorId     String
  authorLinkId String
  assignedAt   DateTime   @default(now())
  Author       Author     @relation(fields: [authorId], references: [id])
  AuthorLink   AuthorLink @relation(fields: [authorLinkId], references: [id])

  @@id([authorId, authorLinkId])
}

model AuthorsOnPosts {
  authorId   String
  postId     String
  assignedAt DateTime @default(now())
  Author     Author   @relation(fields: [authorId], references: [id])
  Post       Post     @relation(fields: [postId], references: [id])

  @@id([authorId, postId])
}

model AuthorsOnTags {
  authorId   String
  tagId      String
  assignedAt DateTime @default(now())
  Author     Author   @relation(fields: [authorId], references: [id], map: "TagsOnAuthors_authorId_fkey")
  Tag        Tag      @relation(fields: [tagId], references: [id], map: "TagsOnAuthors_tagId_fkey")

  @@id([tagId, authorId], map: "TagsOnAuthors_pkey")
}

model Post {
  id             String           @id @default(cuid())
  title          String           @unique
  slug           String?          @unique
  section        String
  thumbnail      String?
  caption        String?
  readingTime    String?
  hasScrollspy   Boolean?         @default(true)
  publishDate    DateTime         @default(now())
  updateDate     DateTime?        @default(now())
  visibility     String           @default("hidden")
  AuthorsOnPosts AuthorsOnPosts[]
  PostsOnTags    PostsOnTags[]
}

model PostsOnTags {
  postId     String
  tagId      String
  assignedAt DateTime @default(now())
  Post       Post     @relation(fields: [postId], references: [id], map: "TagsOnPosts_postId_fkey")
  Tag        Tag      @relation(fields: [tagId], references: [id], map: "TagsOnPosts_tagId_fkey")

  @@id([tagId, postId], map: "TagsOnPosts_pkey")
}

model Tag {
  id            String          @id @default(cuid())
  tagName       String
  AuthorsOnTags AuthorsOnTags[]
  PostsOnTags   PostsOnTags[]
}
